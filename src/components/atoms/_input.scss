.tk-input__container {
  position: relative;
}

textarea.tk-input {
  text-overflow: ellipsis;
  padding-right: toRem(16);
  &:not([rows]), &--medium:not([rows]) {
    min-height: toRem(128);
  }
  &--small {
    &:not([rows]) {
      min-height: toRem(116);
      padding-right: toRem(12);
    }
  }
}

.tk-input {
  // keep independent logic for a standalone tk-input
  width: 100%;
  box-sizing: border-box;
  font-family: inherit;
  font-size: toRem(14);
  line-height: toRem(20);
  @include spacingField(0.5, 1.5, 'padding');
  background-color: transparent;
  border-color: transparent;
  border-radius: toRem(4);
  border: none;
  outline: none;
  @include addTransition();

  &--medium {
    @include spacingField(0.5, 1.5, 'padding');
  }
  &--small {
    @include spacingField(0, 1, 'padding');
  }

  @include styleInput(
    getColor($--tk-input-color, filledText),
    getColor($--tk-input-color, emptyText),
    getColor($--tk-input-color, default),
    getColor($--tk-input-color, active),
    getColor($--tk-input-color, hover),
    getColor($--tk-input-color, defaultBg)
  );

  &:read-only {
    @include styleInput(
      getColor($--tk-input-color, filledText),
      getColor($--tk-input-color, emptyText),
      getColor($--tk-input-color, readonly),
      getColor($--tk-input-color, readonly),
      getColor($--tk-input-color, readonly),
      getColor($--tk-input-color, readonlyBg)
    );
  }
  &:disabled {
    background-color: getColor($--tk-input-color, defaultBg);
  }

  .tk-validation--error > & {
    @include styleInput(
      getColor($--tk-input-color, filledText),
      getColor($--tk-input-color, emptyText),
      getColor($--tk-input-color, errorActive),
      getColor($--tk-input-color, errorActive),
      getColor($--tk-input-color, errorHover),
      getColor($--tk-input-color, defaultBg)
    );
  }
  &:disabled {
    @include styleInput(
      getColor($--tk-input-color, disabledText),
      getColor($--tk-input-color, disabledText),
      getColor($--tk-input-color, disabled),
      getColor($--tk-input-color, disabled),
      getColor($--tk-input-color, disabled),
      getColor($--tk-input-color, defaultBg)
    );
  }
}

.tk-input__container {
  textarea.tk-input {
    padding-right: toRem(4);
  }

  display: flex;

  background-color: transparent;
  border-color: transparent;
  border-radius: toRem(4);
  border: none;
  outline: none;
  padding: 0 toRem(12);
  @include addTransition();

  @include styleInput(
    getColor($--tk-input-color, filledText),
    getColor($--tk-input-color, emptyText),
    getColor($--tk-input-color, default),
    getColor($--tk-input-color, active),
    getColor($--tk-input-color, hover),
    getColor($--tk-input-color, defaultBg)
  );

  .tk-validation--error & {
    @include styleInput(
      getColor($--tk-input-color, filledText),
      getColor($--tk-input-color, emptyText),
      getColor($--tk-input-color, errorActive),
      getColor($--tk-input-color, errorActive),
      getColor($--tk-input-color, errorHover),
      getColor($--tk-input-color, defaultBg)
    );
  }

  .tk-input {
    box-shadow: none; // force cancel tk-input border
    padding: 0;
    flex-grow: 1;
    @include spacingField(0.5, 0);
    line-height: toRem(20);

    &:disabled:hover, &:disabled:active, &:read-only:hover, &:read-only:active, &:read-only:focus-within {
      box-shadow: none; // force cancel tk-input border
    }

    &__icon {
      order: -1;
      display: flex;
      align-self: center;
      justify-content: center;
      align-items: center;

      color: getColor($graphite, '50');

      margin-right: toRem(8);
      max-width: toRem(16);
      max-height: toRem(16);

      border-radius: toRem(4) 0 0 toRem(4);
      @include addTransition();
    }

    &__hide {
      max-height: toRem(39);
      font-size: toRem(12);
      line-height: toRem(16);
      padding: 0 toRem(2);
      background-color: transparent;
      color: getColor($--tk-input-hide-color, default);
      border: none;
      cursor: pointer;
      align-self: center;
      &:focus:not(.focus-visible) {
        outline: none;
      }
      @include addFocusStyle('false');
    }

    &__right-decorators {
      display: flex;
      > *:not(:last-child) {
        margin-right: toRem(8);
      }
    }

    &--medium {
      @include spacingField(0.5, 0);
    }
    &--small {
      @include spacingField(0, 0);
    }
  }

  &--medium {
    padding: 0 toRem(12);
    .tk-input {
      @include spacingField(0.5, 0);
    }
    .tk-input__icon {
      margin-right: toRem(8);
    }
    .tk-input__right-decorators {
      > *:not(:last-child) {
        margin-right: toRem(8);
      }
    }
  }
  &--small {
    padding: 0 toRem(8);
    .tk-input {
      @include spacingField(0, 0);
    }
    .tk-input__icon {
      font-size: toRem(12);
      margin-right: toRem(4);
    }
    .tk-input__hide:focus-visible {
      outline-offset: 0;
    }
    .tk-input__right-decorators {
      font-size: toRem(12);
      > *:not(:last-child) {
        margin-right: toRem(4);
      }
    }
  }

  &--readonly {
    @include styleInput(
      getColor($--tk-input-color, filledText),
      getColor($--tk-input-color, emptyText),
      getColor($--tk-input-color, readonly),
      getColor($--tk-input-color, readonly),
      getColor($--tk-input-color, readonly),
      getColor($--tk-input-color, readonlyBg)
    );
    .tk-input__hide {
      color: getColor($--tk-input-hide-color, disabled);
    }
  }

  &--disabled {
    @include styleInput(
      getColor($--tk-input-color, disabledText),
      getColor($--tk-input-color, emptyText),
      getColor($--tk-input-color, disabled),
      getColor($--tk-input-color, disabled),
      getColor($--tk-input-color, disabled),
      getColor($--tk-input-color, defaultBg)
    );
    .tk-input__icon { // left icon
      outline: none;
      color: getColor($--tk-input-color, disabled); // same as border
    }
    .tk-input__right-decorators { // right icons
      color: getColor($--tk-input-color, disabled); // same as border
    }
    .tk-input__hide {
      display: none;
    }
  }
}
